import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.figure_factory as ff
from dash import Dash, dcc, html, Input, Output
import dash_bootstrap_components as dbc
import dash_table
import joblib
from sklearn.metrics import (
    classification_report,
    confusion_matrix,
    roc_curve,
    auc,
    precision_score,
    recall_score,
    f1_score,
    roc_auc_score,
)

# --- Carregamento de Dados (Carrega todos os dados e modelos UMA VEZ na inicializa√ß√£o) ---
try:
    dados = pd.read_csv('dataset/bs140513_032310.csv')
    X_teste_bruto = joblib.load('data/X_test.pkl')
    y_teste = joblib.load('data/y_test.pkl')
    colunas_caracteristicas = joblib.load('data/feature_columns.pkl')
    X_teste = pd.DataFrame(X_teste_bruto, columns=colunas_caracteristicas)
    
    # CARREGA TODOS OS MODELOS E OS ARMAZENA NA MEM√ìRIA
    resultados_modelo = {
        'Classificador K-Neighbors': joblib.load('models/Classificador_K-Neighbors.pkl'),
        'Classificador Random Forest': joblib.load('models/Classificador_Random_Forest.pkl'),
        'Classificador XGBoost': joblib.load('models/Classificador_XGBoost.pkl'),
    }
except FileNotFoundError as e:
    print(f"Arquivos de modelo ou dados n√£o encontrados. Por favor, execute o script de treinamento primeiro. Erro: {e}")
    exit()

y = dados['fraud']

# --- Layout do Dashboard ---
app = Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])
app.title = "Detec√ß√£o de Fraude em Pagamentos Banc√°rios"
server = app.server

cabecalho = dbc.Navbar(
    dbc.Container(
        [
            html.Div(
                [
                    html.Span("üí∞", className="me-2"),
                    dbc.NavbarBrand("Detec√ß√£o de Fraude em Pagamentos Banc√°rios", class_name="fw-bold text-wrap", style={"color": "black"}),
                ], className="d-flex align-items-center"
            ),
            dbc.Badge("Dashboard", color="primary", className="ms-auto")
        ]
    ),
    color="light",
    class_name="shadow-sm mb-3"
)

# 1. Aba ASK (PERGUNTAR)
aba_perguntar = dcc.Markdown(
    """
    ### ‚ùì **PERGUNTAR** ‚Äî A Vis√£o Geral

    Esta se√ß√£o define o problema central e o valor de neg√≥cio deste projeto.

    **Tarefa de Neg√≥cio**: O objetivo principal √© construir um sistema inteligente que possa identificar com precis√£o transa√ß√µes banc√°rias fraudulentas do **dataset Banksim**. A fraude √© um problema multibilion√°rio que afeta tanto as institui√ß√µes financeiras quanto seus clientes. Ao detectar e prevenir essas transa√ß√µes fraudulentas em tempo real, podemos minimizar perdas financeiras, proteger clientes e manter a confian√ßa.

    **Partes Interessadas**: Os principais usu√°rios deste dashboard seriam **Analistas de Fraude**, **Equipes de Gest√£o de Risco** e a **Lideran√ßa Executiva**. Eles precisam de uma vis√£o clara e f√°cil de entender do desempenho do modelo e das caracter√≠sticas da atividade fraudulenta para tomar decis√µes informadas e implantar estrat√©gias eficazes.

    **Entregas**: O produto final √© este dashboard interativo, que apresenta uma an√°lise abrangente, exibe o desempenho de v√°rios modelos de aprendizado de m√°quina e oferece insights acion√°veis para melhorar a detec√ß√£o de fraudes.
    """, className="p-4"
)

# 2. Aba PREPARE (PREPARAR)
aba_preparar = html.Div(
    children=[
        html.H4(["üìù ", html.B("PREPARAR"), " ‚Äî Preparando os Dados"], className="mt-4"),
        html.P("Antes de construir um modelo preditivo, precisamos entender e preparar nossos dados."),
        html.H5("Fonte de Dados"),
        html.P([
            "Estamos usando o ",
            html.B("dataset Banksim"),
            ", um dataset gerado sinteticamente que simula pagamentos banc√°rios. Ele cont√©m quase 600.000 transa√ß√µes com v√°rias caracter√≠sticas."
        ]),
        dbc.Row(
            [
                dbc.Col(
                    dbc.Card(
                        [
                            dbc.CardHeader("Resumo do Dataset"),
                            dbc.CardBody(
                                [
                                    html.P(f"Total de Transa√ß√µes: {dados.shape[0]}"),
                                    html.P(f"Caracter√≠sticas: {dados.shape[1]}"),
                                    html.P(f"Transa√ß√µes Normais: {y.value_counts()[0]}"),
                                    html.P(f"Transa√ß√µes Fraudulentas: {y.value_counts()[1]}"),
                                ]
                            ),
                        ], className="mb-3"
                    )
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            dbc.CardHeader("Problema de Dados N√£o Balanceados"),
                            dbc.CardBody(
                                [
                                    html.P([
                                        "Como √© comum em dados de fraude, o dataset √© altamente ",
                                        html.B("n√£o balanceado"),
                                        ". Apenas uma pequena fra√ß√£o de todas as transa√ß√µes √© fraudulenta."
                                    ]),
                                    html.P([
                                        "Para resolver isso, usamos uma t√©cnica chamada ",
                                        html.B("SMOTE (Synthetic Minority Over-sampling Technique)"),
                                        ". Em vez de apenas copiar os exemplos de fraude, o SMOTE cria de forma inteligente novos pontos de dados de fraude sint√©ticos que s√£o semelhantes aos existentes, ajudando nossos modelos a aprender de forma mais eficaz."
                                    ]),
                                ]
                            ),
                        ], className="mb-3"
                    )
                ),
            ]
        ),
        html.H5("Descri√ß√µes das Caracter√≠sticas"),
        dcc.Markdown(
            """
            O dataset inclui as seguintes caracter√≠sticas principais:
            - **Step**: O dia da simula√ß√£o, de 0 a 180 (6 meses).
            - **Customer** e **Merchant**: IDs anonimizados para o cliente e o comerciante.
            - **Age** e **Gender**: Informa√ß√µes demogr√°ficas, categorizadas em grupos.
            - **Category**: O tipo de compra (por exemplo, 'es_travel', 'es_health').
            - **Amount**: O valor da transa√ß√£o.
            - **Fraud**: Nossa vari√°vel-alvo. 1 significa fraudulenta, 0 significa n√£o fraudulenta.
            """, className="p-4"
        ),
        html.H5("Amostra do Dataset (Primeiras 10 Linhas)"),
        dash_table.DataTable(
            id='tabela',
            columns=[
                {"name": "ageGroup" if i == 'age' else i, "id": i, "type": "numeric" if i in ['step', 'amount', 'fraud'] else "text"}
                for i in dados.columns
            ],
            data=dados.head(10).to_dict('records'),
            sort_action="native",
            filter_action="native",
            page_action="none",
            style_table={'overflowX': 'auto', 'width': '100%'},
            style_header={
                'backgroundColor': 'rgb(230, 230, 230)',
                'fontWeight': 'bold',
                'textAlign': 'center',
            },
            style_cell={
                'textAlign': 'left',
                'padding': '5px',
                'font-size': '12px',
                'minWidth': '80px', 'width': 'auto', 'maxWidth': '150px',
                'overflow': 'hidden',
                'textOverflow': 'ellipsis',
            },
        ),
    ], className="p-4"
)

# 3. Aba ANALYZE (ANALISAR) com sub-abas
aba_analisar = html.Div(
    children=[
        html.H4(["üìà ", html.B("ANALISAR"), " ‚Äî Encontrando Padr√µes e Construindo Modelos"], className="mt-4"),
        html.P("√â aqui que exploramos os dados para encontrar padr√µes e construir o c√©rebro preditivo do nosso dashboard."),
        dbc.Tabs([
            dbc.Tab(label="An√°lise Explorat√≥ria de Dados", children=[
                html.Div(
                    children=[
                        html.H5("Transa√ß√µes Fraudulentas vs. N√£o Fraudulentas", className="mt-4"),
                        html.P(
                            """
                            Um dos insights mais significativos de nossa explora√ß√£o de dados √© a diferen√ßa nos valores das transa√ß√µes. Transa√ß√µes fraudulentas tendem a ter um valor m√©dio muito maior do que as n√£o fraudulentas. Os fraudadores muitas vezes buscam alvos de alto valor.
                            """
                        ),
                        dbc.Row([
                            dbc.Col(dcc.Graph(id="boxplot-valor")),
                        ]),
                        html.P([
                            html.B("Insight do Box Plot:"),
                            " O box plot mostra a distribui√ß√£o dos valores das transa√ß√µes em diferentes categorias de compra. Embora a maioria das categorias tenha uma faixa de valor semelhante, a categoria ",
                            html.B("'es_travel'"),
                            " se destaca com valores de transa√ß√£o extremamente altos. Isso sugere que os fraudadores visam categorias onde transa√ß√µes de alto valor s√£o comuns, tornando sua atividade menos suspeita."
                        ]),
                        dbc.Row([
                            dbc.Col(dcc.Graph(id="histograma-valor")),
                        ]),
                        html.P([
                            html.B("Insight do Histograma:"),
                            " Este gr√°fico mostra claramente o desequil√≠brio nos dados. H√° muito menos transa√ß√µes fraudulentas, mas elas est√£o concentradas em valores muito mais altos, enquanto as transa√ß√µes benignas s√£o de baixo valor e muito frequentes. Este √© um padr√£o cl√°ssico na detec√ß√£o de fraudes e confirma nossa hip√≥tese."
                        ]),
                        html.H5("Fraude por Categoria e Grupo Et√°rio", className="mt-4"),
                        html.P("Tamb√©m exploramos como a fraude se distribui por diferentes categorias de compra e grupos et√°rios."),
                        dbc.Row([
                            dbc.Col(dcc.Graph(id="barra-fraude-categoria"), md=6),
                            dbc.Col(dcc.Graph(id="barra-fraude-idade"), md=6),
                        ]),
                        html.P([
                            html.B("Insight da Fraude por Categoria:"),
                            " O gr√°fico de barras mostra a porcentagem de transa√ß√µes fraudulentas dentro de cada categoria. ",
                            html.B("'es_leisure'"),
                            " e ",
                            html.B("'es_travel'"),
                            " t√™m as maiores taxas de fraude, refor√ßando a ideia de que os fraudadores visam categorias de alto valor e gastos discricion√°rios."
                        ]),
                        html.H5("An√°lise por Categoria"),
                        dcc.Markdown(
                            """
                            O dataset inclui as seguintes categorias:
                            - **es_leisure**: Representa transa√ß√µes para atividades recreativas, como entretenimento, hobbies ou bens de luxo.
                            - **es_travel**: Transa√ß√µes relacionadas a viagens, incluindo voos, hot√©is e transporte.
                            - **es_health**: Transa√ß√µes para servi√ßos e produtos m√©dicos ou de sa√∫de.
                            - **es_hotelservices**: Transa√ß√µes para estadias em hot√©is e servi√ßos relacionados.
                            - **es_barsandrestaurants**: Pagamentos feitos em bares e restaurantes.
                            - **es_transportation**: Transa√ß√µes para transporte, como passagens de √¥nibus ou trem.
                            - **es_sportsandoutdoors**: Compras de equipamentos esportivos ou artigos para atividades ao ar livre.
                            - **es_contents**: Transa√ß√µes para conte√∫do digital ou m√≠dia.
                            - **es_fashion**: Compras de roupas e acess√≥rios.
                            - **es_tech**: Transa√ß√µes para eletr√¥nicos e tecnologia.
                            - **es_home**: Compras relacionadas a produtos e servi√ßos para casa.
                            - **es_shopping_net**: Transa√ß√µes de compras online.
                            - **es_others**: Uma categoria gen√©rica para transa√ß√µes que n√£o se encaixam nas outras.
                            - **es_food**: Transa√ß√µes para supermercado ou itens aliment√≠cios.
                            - **es_service**: Transa√ß√µes para servi√ßos em geral.
                            - **es_shopping**: Transa√ß√µes de compras presenciais.
                            """, className="p-4"
                        ),
                        html.P([
                            html.B("Insight da Fraude por Grupo Et√°rio:"),
                            " Curiosamente, o grupo et√°rio com menos de 18 anos (categoria '0') tem a maior porcentagem de fraude. Isso pode ser devido a uma s√©rie de raz√µes, como indiv√≠duos mais jovens sendo mais suscet√≠veis a roubo de identidade ou fraudadores intencionalmente usando perfis de idade mais jovem."
                        ]),
                        html.H5("An√°lise por Grupo Et√°rio"),
                        dcc.Markdown(
                            """
                            - **Grupo Et√°rio 0**: Menos de 18 anos. Este grupo mostra a maior taxa de fraude, o que pode ser um resultado de comportamento online menos seguro ou do uso de credenciais roubadas em contas com medidas de seguran√ßa menos rigorosas.
                            - **Grupo Et√°rio 1**: 18-25 anos.
                            - **Grupo Et√°rio 2**: 26-35 anos.
                            - **Grupo Et√°rio 3**: 36-45 anos.
                            - **Grupo Et√°rio 4**: 46-55 anos.
                            - **Grupo Et√°rio 5**: 56-65 anos.
                            - **Grupo Et√°rio 6**: Acima de 65 anos.
                            """, className="p-4"
                        ),
                    ], className="p-4"
                )
            ]),
            dbc.Tab(label="Desempenho do Modelo", children=[
                html.Div(
                    children=[
                        html.H5("Desempenho do Modelo em Dados de Teste", className="mt-4"),
                        html.P([
                            "Treinamos tr√™s modelos diferentes de aprendizado de m√°quina: ",
                            html.B("K-Nearest Neighbors (KNN)"),
                            ", ",
                            html.B("Random Forest"),
                            " e ",
                            html.B("XGBoost"),
                            ". Esses modelos s√£o avaliados em um conjunto de 'teste' separado para garantir que n√£o estejam apenas memorizando os dados de treinamento."
                        ]),
                        html.P(
                            ["Para realmente avaliar nossos modelos de detec√ß√£o de fraude, focamos em v√°rias m√©tricas-chave al√©m da simples acur√°cia:",
                            html.Ul([
                                html.Li([html.B("Precis√£o:"), " Pense na Precis√£o como o custo de um alarme falso. Se nosso modelo sinaliza uma transa√ß√£o como fraudulenta, alta precis√£o significa que √© muito prov√°vel que ela seja realmente fraudulenta. De todas as transa√ß√µes que nosso modelo sinalizou, quantas eram realmente fraudulentas? Alta precis√£o √© boa para reduzir investiga√ß√µes desnecess√°rias."]),
                                html.Li([html.B("Recall (Sensibilidade):"), " Pense no Recall como o custo de uma fraude perdida. Alto recall significa que nosso modelo captura a maioria das transa√ß√µes fraudulentas reais, para que n√£o deixemos a fraude passar despercebida. De todas as transa√ß√µes fraudulentas, quantas nosso modelo identificou com sucesso? Alto recall √© crucial para evitar perdas financeiras."]),
                                html.Li([html.B("F1-Score:"), " Este √© um equil√≠brio entre precis√£o e recall, fornecendo uma √∫nica m√©trica para comparar modelos. √â a m√©dia harm√¥nica da precis√£o e do recall, resumindo tanto alarmes falsos quanto fraudes perdidas em um √∫nico n√∫mero."]),
                                html.Li([html.B("ROC-AUC:"), " Esta √© uma poderosa m√©trica de resumo que mede a capacidade do modelo de distinguir entre transa√ß√µes fraudulentas e n√£o fraudulentas. Uma pontua√ß√£o mais pr√≥xima de 1.0 indica que o modelo pode separar de forma confi√°vel as duas classes, tornando-o altamente eficaz para a tomada de decis√µes."])
                            ])
                            ]
                        ),
                        dbc.Row([
                            dbc.Col(dcc.Graph(id="barra-metricas-modelo"), md=12),
                        ]),
                        
                        # Nova se√ß√£o de texto para descrever o desempenho do modelo com n√∫meros
                        html.P([
                            "Nossa an√°lise mostra que o ", html.B("Classificador XGBoost"), " teve um desempenho excepcionalmente bom, alcan√ßando uma ", html.B("Precis√£o de 0.99"), ", um ", html.B("Recall de 0.99"), ", um ", html.B("F1-Score de 0.99"), ", e um ", html.B("ROC-AUC de 0.99"),
                            ". Esses resultados, embora incrivelmente fortes, devem ser considerados juntamente com a matriz de confus√£o completa para uma vis√£o completa do desempenho do modelo. O ", html.B("Classificador K-Neighbors"), " tamb√©m teve um desempenho excepcionalmente bom, com uma ", html.B("Precis√£o de 0.98"), ", um ", html.B("Recall de 0.99"), ", um ", html.B("F1-Score de 0.99"), ", e um ", html.B("ROC-AUC de 0.99"),
                            ". O ", html.B("Classificador Random Forest"), " teve um desempenho menor, mas ainda forte, com uma ", html.B("Precis√£o de 0.97"), ", um ", html.B("Recall de 0.99"), ", um ", html.B("F1-Score de 0.98"), ", e um ", html.B("ROC-AUC de 0.99"), ". O desempenho superior do XGBoost em algumas m√©tricas-chave o torna um forte candidato, mas os outros modelos tamb√©m apresentam resultados convincentes."
                        ]),
                        html.Hr(),
                        html.H5("Matriz de Confus√£o e Curva ROC", className="mt-4"),
                        html.P("Selecione um modelo para visualizar sua matriz de confus√£o e curva ROC espec√≠ficas:"),
                        dcc.Dropdown(
                            id='seletor-modelo-dropdown',
                            options=[{'label': i, 'value': i} for i in resultados_modelo.keys()],
                            value='Classificador XGBoost',
                            clearable=False,
                            style={'width': '50%', 'margin-bottom': '20px'}
                        ),
                        dbc.Row([
                            dbc.Col(dcc.Graph(id="matriz-confusao"), md=6),
                            dbc.Col(dcc.Graph(id="curva-roc"), md=6),
                        ]),
                        html.H6("Matriz de Confus√£o", className="mt-4"),
                        html.P(
                            ["A matriz de confus√£o √© uma tabela que divide as previs√µes do nosso modelo em quatro categorias:",
                            html.Ul([
                                html.Li([html.B("Verdadeiros Positivos (VP):"), " Pagamentos fraudulentos corretamente previstos."]),
                                html.Li([html.B("Verdadeiros Negativos (VN):"), " Pagamentos leg√≠timos corretamente previstos."]),
                                html.Li([html.B("Falsos Positivos (FP):"), " Pagamentos fraudulentos incorretamente previstos (erro Tipo I). S√£o transa√ß√µes leg√≠timas sinalizadas como fraude, o que pode ser um inconveniente para os clientes."]),
                                html.Li([html.B("Falsos Negativos (FN):"), " Pagamentos leg√≠timos incorretamente previstos (erro Tipo II). S√£o transa√ß√µes fraudulentas que foram perdidas pelo modelo, representando uma perda financeira para o banco e um risco de seguran√ßa para o cliente."])
                            ])
                            ]
                        ),
                        html.P([
                            "Para fornecer uma vis√£o mais granular do desempenho de cada modelo, podemos olhar para os resultados da ",
                            html.B("matriz de confus√£o"), ". O ",
                            html.B("Classificador XGBoost"), " teve uma acur√°cia de ",
                            html.B("99.15%"), " com ",
                            html.B("175.490 verdadeiros positivos (VP)"), " e ",
                            html.B("173.997 verdadeiros negativos (VN)"), ", enquanto classificou incorretamente apenas ",
                            html.B("2.236 transa√ß√µes como falsos positivos (FP)"), " e ",
                            html.B("743 como falsos negativos (FN)"), ". O ",
                            html.B("Classificador K-Neighbors"), " teve uma acur√°cia de ",
                            html.B("98.70%"), " com ",
                            html.B("175.871 verdadeiros positivos (VP)"), " e ",
                            html.B("171.999 verdadeiros negativos (VN)"), ", com ",
                            html.B("4.234 falsos positivos (FP)"), " e ",
                            html.B("362 falsos negativos (FN)"), ". Por fim, o ",
                            html.B("Classificador Random Forest"), " teve uma acur√°cia de ",
                            html.B("97.96%"), " ao identificar corretamente ",
                            html.B("175.154 verdadeiros positivos (VP)"), " e ",
                            html.B("170.106 verdadeiros negativos (VN)"), ", com ",
                            html.B("6.127 falsos positivos (FP)"), " e ",
                            html.B("1.079 falsos negativos (FN)"), ". Esses n√∫meros ressaltam o excelente equil√≠brio que cada modelo alcan√ßa entre capturar fraudes e evitar alarmes falsos."
                        ]),
                        html.H6("Curva Caracter√≠stica de Opera√ß√£o do Receptor (ROC)", className="mt-4"),
                        html.P([
                            "A curva ROC plota a ",
                            html.B("Taxa de Verdadeiros Positivos"),
                            " contra a ",
                            html.B("Taxa de Falsos Positivos"),
                            ". Quanto mais pr√≥xima a curva estiver do canto superior esquerdo, melhor o modelo distingue entre as duas classes (fraude e n√£o fraude). A √Årea sob a Curva (AUC) fornece uma √∫nica m√©trica para resumir o desempenho do modelo.",
                        ]),
                        html.P([
                            "O ",
                            html.B("Classificador Random Forest"),
                            " e o ",
                            html.B("Classificador K-Neighbors"),
                            " ambos alcan√ßaram uma curva ROC perfeita com um ",
                            html.B("AUC de 1.00"),
                            ", enquanto o ",
                            html.B("Classificador XGBoost"),
                            " ficou muito pr√≥ximo com um ",
                            html.B("AUC de 0.99"),
                            ". Esses resultados demonstram a excelente capacidade dos modelos de diferenciar entre transa√ß√µes fraudulentas e n√£o fraudulentas. Todos os tr√™s modelos s√£o altamente eficazes na identifica√ß√£o de fraudes, com os classificadores Random Forest e K-Neighbors performando um pouco melhor nesta m√©trica espec√≠fica."
                        ]),
                        html.Hr(),
                        html.H5("Import√¢ncia das Caracter√≠sticas (para modelos baseados em √°rvores)", className="mt-4"),
                        html.P("Este gr√°fico classifica as caracter√≠sticas com base em sua contribui√ß√£o para a previs√£o do modelo."),
                        dcc.Dropdown(
                            id="dropdown-importancia-caracteristica",
                            options=[
                                {'label': 'Classificador Random Forest', 'value': 'Classificador Random Forest'},
                                {'label': 'Classificador XGBoost', 'value': 'Classificador XGBoost'}
                            ],
                            value='Classificador XGBoost'
                        ),
                        dcc.Graph(id="grafico-importancia-caracteristica"),
                    ], className="p-4"
                )
            ]),
        ])
    ]
)

# 4. Aba ACT (AGIR)
aba_agir = dcc.Markdown(
    """
    ### üöÄ **AGIR** ‚Äî O Que Fazer a Seguir

    Esta √© a se√ß√£o mais importante, pois traduz nossos insights de dados em uma estrat√©gia de neg√≥cio.

    -   **Implantar o Melhor Modelo**: O **Classificador XGBoost** √© nosso modelo recomendado para implanta√ß√£o devido ao seu desempenho superior nos dados de teste. Este modelo ser√° o c√©rebro por tr√°s de nosso novo sistema proativo de detec√ß√£o de fraudes.
    -   **Alertas em Tempo Real**: O modelo implantado deve ser usado para fornecer pontua√ß√µes de risco em tempo real para cada transa√ß√£o. Qualquer transa√ß√£o com uma alta pontua√ß√£o de fraude pode ser automaticamente sinalizada para revis√£o ou instantaneamente recusada.
    -   **Cria√ß√£o de Regras Direcionadas**: Nossa an√°lise revelou que as transa√ß√µes fraudulentas est√£o frequentemente ligadas a **categorias espec√≠ficas (como 'es_leisure' e 'es_travel')** e t√™m **valores altos**. Esses insights podem ser usados para criar regras de neg√≥cio adicionais e mais espec√≠ficas que trabalham em conjunto com o modelo de aprendizado de m√°quina, criando uma defesa mais robusta contra fraudes.
    -   **Melhoria Cont√≠nua**: O desempenho do modelo deve ser monitorado ao longo do tempo. √Ä medida que novos padr√µes de fraude surgem, o modelo deve ser retreinado com novos dados para garantir que continue eficaz.
    """, className="p-4"
)

app.layout = dbc.Container(
    [
        cabecalho,
        dbc.Tabs(
            [
                dbc.Tab(aba_perguntar, label="Perguntar"),
                dbc.Tab(aba_preparar, label="Preparar"),
                dbc.Tab(aba_analisar, label="Analisar"),
                dbc.Tab(aba_agir, label="Agir"),
            ]
        ),
    ],
    fluid=True,
)

# --- Callbacks para Gr√°ficos ---
@app.callback(
    Output("boxplot-valor", "figure"),
    Input("histograma-valor", "id") # Input fict√≠cio para acionar na inicializa√ß√£o
)
def atualizar_boxplot_valor(dummy):
    fig = go.Figure()
    for categoria in dados['category'].unique():
        df_cat = dados[dados['category'] == categoria]
        fig.add_trace(go.Box(
            y=df_cat['amount'],
            name=categoria,
        ))
    
    fig.update_layout(
        title="Valor da Transa√ß√£o por Categoria",
        yaxis_title="Valor",
        showlegend=False,
        height=600,
        margin=dict(t=50, b=50),
    )
    fig.update_yaxes(range=[0, 1000]) # Define o limite do eixo y para focar na distribui√ß√£o principal
    return fig

@app.callback(
    Output("histograma-valor", "figure"),
    Input("boxplot-valor", "id") # Input fict√≠cio para acionar na inicializa√ß√£o
)
def atualizar_histograma_valor(dummy):
    df_fraude = dados[dados['fraud'] == 1]
    df_nao_fraude = dados[dados['fraud'] == 0]
    fig = go.Figure()
    fig.add_trace(go.Histogram(x=df_fraude['amount'], name='Fraudulenta', marker_color='red'))
    fig.add_trace(go.Histogram(x=df_nao_fraude['amount'], name='N√£o Fraudulenta', marker_color='blue'))
    fig.update_layout(
        title="Distribui√ß√£o dos Valores de Transa√ß√£o",
        xaxis_title="Valor",
        yaxis_title="Contagem",
        barmode='overlay',
        bargap=0.2,
        height=600,
        margin=dict(t=50, b=50)
    )
    fig.update_traces(opacity=0.75)
    fig.update_xaxes(range=[0, 2000])
    return fig

@app.callback(
    Output("barra-fraude-categoria", "figure"),
    Input("barra-fraude-idade", "id") # Input fict√≠cio para acionar na inicializa√ß√£o
)
def atualizar_barra_fraude_categoria(dummy):
    fraude_por_categoria = dados.groupby('category')['fraud'].mean().reset_index()
    fig = go.Figure(go.Bar(
        x=fraude_por_categoria['category'],
        y=fraude_por_categoria['fraud'] * 100,
        marker_color='lightblue'
    ))
    fig.update_layout(
        title="Porcentagem de Transa√ß√µes Fraudulentas por Categoria",
        xaxis_title="Categoria",
        yaxis_title="Porcentagem de Fraude (%)",
        height=500,
        margin=dict(l=50, r=50, t=50, b=150)
    )
    return fig

@app.callback(
    Output("barra-fraude-idade", "figure"),
    Input("barra-fraude-categoria", "id") # Input fict√≠cio para acionar na inicializa√ß√£o
)
def atualizar_barra_fraude_idade(dummy):
    fraude_por_idade = dados.groupby('age')['fraud'].mean().reset_index()
    fig = go.Figure(go.Bar(
        x=fraude_por_idade['age'],
        y=fraude_por_idade['fraud'] * 100,
        marker_color='lightgreen'
    ))
    fig.update_layout(
        title="Porcentagem de Transa√ß√µes Fraudulentas por Grupo Et√°rio",
        xaxis_title="Grupo Et√°rio",
        yaxis_title="Porcentagem de Fraude (%)",
        height=500,
        margin=dict(t=50, b=50)
    )
    return fig

@app.callback(
    Output("barra-metricas-modelo", "figure"),
    # O Input para este callback n√£o √© necess√°rio, pois √© est√°tico na inicializa√ß√£o.
    # Usamos um input fict√≠cio para garantir que ele seja executado na inicializa√ß√£o.
    Input('barra-fraude-idade', 'id')
)
def atualizar_barra_metricas_modelo(dummy):
    # Gr√°fico de Barras de M√©tricas do Modelo
    linhas_df = []
    for nome, modelo in resultados_modelo.items():
        previsoes = modelo.predict(X_teste)
        
        if hasattr(modelo, 'predict_proba'):
            probabilidades = modelo.predict_proba(X_teste)[:, 1]
        else:
            probabilidades = modelo.decision_function(X_teste)

        linhas_df.append({
            'Modelo': nome,
            'Precis√£o': precision_score(y_teste, previsoes, zero_division=0),
            'Recall': recall_score(y_teste, previsoes, zero_division=0),
            'F1-Score': f1_score(y_teste, previsoes, zero_division=0),
            'ROC-AUC': roc_auc_score(y_teste, probabilidades),
        })
    metricas_df = pd.DataFrame(linhas_df).round(4)
    
    barra_metricas = go.Figure()
    for metrica in ['Precis√£o', 'Recall', 'F1-Score', 'ROC-AUC']:
        barra_metricas.add_trace(go.Bar(
            y=metricas_df["Modelo"],
            x=metricas_df[metrica],
            orientation='h',
            name=metrica
        ))
    barra_metricas.update_layout(
        barmode='group',
        title="M√©tricas de Desempenho do Modelo",
        height=450,
        margin=dict(l=150, r=20, t=50, b=20),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    return barra_metricas

@app.callback(
    Output("matriz-confusao", "figure"),
    Output("curva-roc", "figure"),
    Input('seletor-modelo-dropdown', 'value')
)
def atualizar_matriz_confusao_roc(modelo_selecionado):
    modelo = resultados_modelo[modelo_selecionado]
    y_previsao = modelo.predict(X_teste)
    
    # Obt√©m a matriz de confus√£o bruta do scikit-learn
    # [[VN, FP],
    #  [FN, VP]]
    cm = confusion_matrix(y_teste, y_previsao)
    
    # Extrai os valores explicitamente para evitar confus√µes
    vn = cm[0, 0]
    fp = cm[0, 1]
    fn = cm[1, 0]
    vp = cm[1, 1]
    
    # Reordena a matriz para exibir como [[VP, FN], [FP, VN]]
    dados_z = np.array([[vp, fn],
                        [fp, vn]])

    # Cria as anota√ß√µes de texto para cada c√©lula com r√≥tulos
    texto_cm = np.array([
        [f'VP: {vp}', f'FN: {fn}'],
        [f'FP: {fp}', f'VN: {vn}']
    ])
    
    # Cria o mapa de calor anotado
    fig_cm = ff.create_annotated_heatmap(
        z=dados_z,
        x=["Fraude Prevista (1)", "N√£o Fraude Prevista (0)"],
        y=["Fraude Real (1)", "N√£o Fraude Real (0)"],
        annotation_text=texto_cm,
        colorscale='blues',
        showscale=False
    )

    # Inverte o eixo y para que a linha superior seja "Fraude Real"
    fig_cm.update_yaxes(autorange='reversed')

    fig_cm.update_layout(
        title=f"Matriz de Confus√£o ({modelo_selecionado})",
        xaxis_title="Classe Prevista",
        yaxis_title="Classe Real",
        height=450,
        margin=dict(t=50, b=50)
    )
    
    # Atualiza o tamanho da fonte das anota√ß√µes
    fig_cm.update_annotations(font_size=16)
    
    # Curva ROC
    fig_roc = go.Figure()
    if hasattr(modelo, "predict_proba"):
        probabilidades = modelo.predict_proba(X_teste)[:, 1]
    else:
        probabilidades = modelo.decision_function(X_teste)

    fpr, tpr, _ = roc_curve(y_teste, probabilidades)
    roc_auc = auc(fpr, tpr)

    fig_roc.add_trace(go.Scatter(x=fpr, y=tpr, mode='lines', name=f'Curva ROC (AUC={roc_auc:.2f})'))
    fig_roc.add_trace(go.Scatter(x=[0, 1], y=[0, 1], mode='lines', line=dict(dash='dash'), name='Adivinha√ß√£o Aleat√≥ria'))
    fig_roc.update_layout(
        title=f"Curva ROC ({modelo_selecionado})",
        xaxis_title="Taxa de Falsos Positivos",
        yaxis_title="Taxa de Verdadeiros Positivos",
        height=450,
        margin=dict(t=50, b=50)
    )
    
    return fig_cm, fig_roc

@app.callback(
    Output("grafico-importancia-caracteristica", "figure"),
    Input("dropdown-importancia-caracteristica", "value")
)
def atualizar_importancia_caracteristica(modelo_selecionado):
    modelo = resultados_modelo[modelo_selecionado]
    
    if hasattr(modelo, 'feature_importances_'):
        colunas_caracteristicas = X_teste.columns
        importancias = modelo.feature_importances_
        df_importancia = pd.DataFrame({
            'caracteristica': colunas_caracteristicas,
            'importancia': importancias
        }).sort_values(by='importancia', ascending=False)
        
        fig = go.Figure(go.Bar(
            x=df_importancia['importancia'],
            y=df_importancia['caracteristica'],
            orientation='h'
        ))
        fig.update_layout(
            title=f"Import√¢ncia das Caracter√≠sticas para {modelo_selecionado}",
            xaxis_title="Import√¢ncia",
            yaxis_title="Caracter√≠stica",
            height=500,
            margin=dict(l=150, t=50, b=50)
        )
        return fig
    else:
        fig = go.Figure(go.Scatter())
        fig.update_layout(title=f"N√£o h√° Import√¢ncia de Caracter√≠sticas para {modelo_selecionado}", height=450, margin=dict(t=50, b=50))
        return fig

if __name__ == "__main__":
    app.run(debug=True)